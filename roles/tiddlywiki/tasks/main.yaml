---
# file: roles/tiddlywiki/tasks/main.yaml
# vim:ft=ansible:

- name: "Set some facts"
  set_fact:
    tw5_wiki_name: "{{ tw5_wiki_name|default('mywiki') }}"
    tw5_base_path: "{{ tw5_base_path|default('/home/' ~ ansible_env.SUDO_USER) }}"
    tw5_wiki_path: "{{ tw5_base_path|default('/home/' ~ ansible_env.SUDO_USER) ~ '/' ~ tw5_wiki_name|default('mywiki') }}"
    tw5_passwd_file: "{{ tw5_passwd_file|default('/etc/apache2/tiddlywiki' ~ tw5_wiki_name|default('mywiki') ~ '.htpasswd') }}"
    tw5_user: "{{ tw5_user|default(ansible_env.SUDO_USER) }}"
    tw5_address: "{{ tw5_address|default('127.0.0.1') }}"
    tw5_port: "{{ tw5_port|default('8080') }}"

- name: "Install packages"
  apt:
    state: "latest"
    name: "{{ item }}"
  with_items:
    - nodejs
    - nodejs-legacy
    - npm
    - apache2
    - apache2-utils
    - screen

#- command: >
#    npm install -g tiddlywiki
#  args:
#    creates: "/usr/local/bin/tiddlywiki"

- name: "Install tiddlywiki NPM package"
  npm:
    name: "tiddlywiki"
    global: "yes"
    state: "present"
    production: "yes"

- name: "Install Apache site configuration file"
  template:
    src: "{{ item }}.conf.j2"
    dest: "/etc/apache2/sites-available/{{ item }}-{{ tw5_wiki_name }}.conf"
    owner: "root"
    group: "www-data"
    mode: "0640"
  notify: "restart apache2"
  with_items:
    - "tiddlywiki"
    - "tiddlywiki-base-include"
    - "tiddlywiki-ssl-include"
    - "tiddlywiki-proxy-include"

- name: "Add username and password to Apache htpasswd file"
  command: >
    htpasswd
      -b -B
      -c "{{ tw5_passwd_file }}"
      "{{ tw5_user }}" "{{ tw5_password }}"
  args:
    creates: "{{ tw5_passwd_file }}"
  when: tw5_password is defined

- name: "Add password hashed to Apache htpasswd file"
  lineinfile:
    dest: "{{ tw5_passwd_file }}"
    state: "present"
    create: "yes"
    group: "root"
    owner: "www-data"
    mode: "0640"
    line: "{{ item }}"
  with_items: '{{ tw5_crypts }}'
  when: tw5_crypts is defined

- name: "Discover enabled Apache virtual hosts"
  find:
    paths: "/etc/apache2/sites-enabled"
    patterns: '(?!tiddlywiki-{{ tw5_wiki_name }}.conf)'
    use_regex: true
  register: other_apache_vhosts

- name: "Disable all Apache virtual hosts"
  command: >
    a2dissite *
  args:
    chdir: "/etc/apache2/sites-enabled"
  when: tw5_exclusive_vhost|default(False)|bool and other_apache_vhosts.matched >= 1

- name: "Check for existing Apache site configuration file"
  command: test -e "/etc/apache/sites-enabled/tiddlywiki-{{ tw5_wiki_name }}.conf"
  register: apache_site_config_file
  changed_when: false
  failed_when: false

- name: "Enable Apache site configuration file"
  command: a2ensite tiddlywiki-{{ tw5_wiki_name }}.conf
  args:
    creates: "/etc/apache2/sites-enabled/tiddlywiki-{{ tw5_wiki_name }}.conf"

- name: "Enable Apache module dependencies"
  command: a2enmod "{{ item }}"
  args:
    creates: "/etc/apache2/mods-enabled/{{ item }}.load"
  with_items:
    - ssl
    - rewrite
    - headers
    - speling
    - proxy
    - proxy_http
  notify: "restart apache2"

- name: "Initialise TiddlyWiki server"
  command: >
    tiddlywiki "{{ tw5_wiki_name }}" --init server
  args:
    chdir: "{{ tw5_base_path }}"
    creates: "{{ tw5_wiki_path }}"
  become: no
  notify: "restart apache2"

- name: "Check if NodeJS server is already running"
  command: >
    pgrep -u '{{ ansible_env.SUDO_USER }}' -f '^node .* {{ tw5_wiki_name }} .*server'
  register: nodejs_pid
  changed_when: false
  failed_when: nodejs_pid.stderr|length|bool

- name: "Install systemd service"
  template:
    src: "tiddlywiki.service.j2"
    dest: "/etc/systemd/system/tiddlywiki-{{ tw5_wiki_name }}.service"
    owner: "root"
    group: "root"
    mode: 0644
  when: ansible_service_mgr == "systemd"
  register: tiddlywiki_systemd_service

- name: "Enable systemd service"
  systemd:
    name: "tiddlywiki-{{ tw5_wiki_name }}"
    daemon_reload: "yes"
    enabled: "yes"
    state: "restarted"
  when: tiddlywiki_systemd_service.changed

# Find out how to run the nodejs tiddlywiki server process as a background
# daemon, instead of running it inside of a GNU Screen session.
- name: "Start TiddlyWiki NodeJS server inside GNU Screen"
  command: >
    screen
      -c /dev/null -d -m -U
      -S tw5-{{ tw5_wiki_name }}
      -t tw5-{{ tw5_wiki_name }}
      tiddlywiki "{{ tw5_wiki_name }}" --server
  args:
    chdir: "{{ tw5_base_path }}"
  become: no
  when: not nodejs_pid.stdout|length|bool and not ansible_service_mgr == "systemd" and not ansible_service_mgr == "upstart"

- name: "Install static.css"
  template:
    src: "static.css.j2"
    dest: "/var/www/s/static.css"
    owner: "root"
    group: "www-data"
    mode: "0644"

- name: "Install generate-static-tiddlers.sh"
  template:
    src: "generate-static-tiddlers.sh.j2"
    dest: "{{ tw5_wiki_path }}/generate-static-tiddlers.sh"
    owner: "{{ tw5_user }}"
    mode: "0700"

